name: Release
on:
  push:
    branches:
      - main
env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10
  MACOSX_DEPLOYMENT_TARGET: 10.7

jobs:
  # Update release PR
  release_please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: rust

  # Build sources for every OS
  github_build:
    name: Build release binaries
    needs: release_please
    if: ${{ needs.release_please.outputs.release_created == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: ahoy-x86_64-unknown-linux-gnu.tar.gz
            rustflags: "-C target-feature=-crt-static"

          - target: x86_64-apple-darwin
            os: macos-latest
            name: ahoy-x86_64-apple-darwin.tar.gz
            rustflags: "-C link-arg=-undefined -C link-arg=dynamic_lookup -C target-feature=+crt-static"

          - target: aarch64-apple-darwin
            os: macos-latest
            name: ahoy-aarch64-apple-darwin.tar.gz
            rustflags: "-C link-arg=-undefined -C link-arg=dynamic_lookup -C target-feature=+crt-static"

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ahoy-x86_64-pc-windows-msvc.zip
            rustflags: "-C target-feature=+crt-static"

          - target: i686-pc-windows-msvc
            os: windows-latest
            name: ahoy-i686-pc-windows-msvc.zip
            rustflags: "-C target-feature=+crt-static"

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      RUSTFLAGS: ${{ matrix.rustflags || '' }}
      PKG_CONFIG_ALLOW_CROSS: 1
    steps:
      - uses: actions/checkout@v3
      - name: Setup | Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}

      - name: Setup | Install libusb [Linux]
        continue-on-error: true
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install pkg-config libusb-1.0-0-dev libudev-dev

      - name: Setup | Install libusb [macOS]
        continue-on-error: true
        if: matrix.os == 'macos-latest'
        run: brew install pkg-config libusb

      - name: Setup | Install libusb [Windows]
        continue-on-error: true
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git --depth 1
          vcpkg/bootstrap-vcpkg.bat
          vcpkg/vcpkg integrate install
          vcpkg/vcpkg install libusb

      - name: Setup | Install cargo-wix [Windows]
        continue-on-error: true
        # aarch64 is only supported in wix 4.0 development builds
        if: matrix.os == 'windows-latest' && matrix.target != 'aarch64-pc-windows-msvc'
        run: cargo install --version 0.3.2 cargo-wix
        env:
          # cargo-wix does not require static crt
          RUSTFLAGS: ""

      - name: Build | Build
        uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build | Installer [Windows]
        continue-on-error: true
        if: matrix.os == 'windows-latest' && matrix.target != 'aarch64-pc-windows-msvc'
        uses: actions-rs/cargo@v1.0.3
        with:
          command: wix
          args: -v --no-build --nocapture -I install/windows/main.wxs --target ${{ matrix.target }} --output target/wix/ahoy-${{ matrix.target }}.msi

      - name: Post Build | Prepare artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip ahoy.exe
          7z a ../../../${{ matrix.name }} ahoy.exe
          cd -

      - name: Post Build | Prepare artifacts [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          # TODO: investigate better cross platform stripping
          strip ahoy || true
          tar czvf ../../../${{ matrix.name }} ahoy
          cd -

      - name: Release | Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

      - name: Release | Upload installer artifacts [Windows]
        continue-on-error: true
        if: matrix.os == 'windows-latest' && matrix.target != 'aarch64-pc-windows-msvc'
        uses: actions/upload-artifact@v3
        with:
          name: ahoy-${{ matrix.target }}.msi
          path: target/wix/ahoy-${{ matrix.target }}.msi

  # Notarize starship binaries for MacOS and build notarized pkg installers
  # notarize_and_pkgbuild:
  #   runs-on: macos-latest
  #   continue-on-error: true
  #   needs: [github_build, merge_crowdin_pr]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - target: x86_64-apple-darwin
  #           arch: x86_64
  #           name: starship-x86_64-apple-darwin.tar.gz
  #           pkgname: starship-x86_64-apple-darwin.pkg

  #         - target: aarch64-apple-darwin
  #           arch: aarch64
  #           name: starship-aarch64-apple-darwin.tar.gz
  #           pkgname: starship-aarch64-apple-darwin.pkg

  #   env:
  #     KEYCHAIN_FILENAME: app-signing.keychain-db
  #     KEYCHAIN_ENTRY: AC_PASSWORD
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         # Required to include the recently merged Crowdin PR
  #         ref: master

  #     - name: Notarize | Set up secrets
  #       env:
  #         APP_CERTIFICATE_BASE64: ${{ secrets.APPLEDEV_APPSIGNKEY_BASE64 }}
  #         INSTALL_CERTIFICATE_BASE64: ${{ secrets.APPLEDEV_INSTALLERSIGNKEY_BASE64 }}
  #         P12_PASSWORD: ${{ secrets.APPLEDEV_SIGNKEY_PASS }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.APPLEDEV_SIGNKEY_PASS }}
  #         APPLEID_USERNAME: ${{ secrets.APPLEDEV_ID_NAME }}
  #         APPLEID_TEAMID: ${{ secrets.APPLEDEV_TEAM_ID }}
  #         APPLEID_PASSWORD: ${{ secrets.APPLEDEV_PASSWORD }}
  #       run: |
  #         APP_CERTIFICATE_PATH="$RUNNER_TEMP/app_certificate.p12"
  #         INSTALL_CERTIFICATE_PATH="$RUNNER_TEMP/install_certificate.p12"
  #         KEYCHAIN_PATH="$RUNNER_TEMP/$KEYCHAIN_FILENAME"

  #         # import certificates from secrets
  #         echo -n "$APP_CERTIFICATE_BASE64" | base64 --decode --output $APP_CERTIFICATE_PATH
  #         echo -n "$INSTALL_CERTIFICATE_BASE64" | base64 --decode --output $INSTALL_CERTIFICATE_PATH

  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
  #         security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

  #         # import certificates to keychain
  #         security import $APP_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security import $INSTALL_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH

  #         # Add Apple Developer ID credentials to keychain
  #         xcrun notarytool store-credentials "$KEYCHAIN_ENTRY" --team-id "$APPLEID_TEAMID" --apple-id "$APPLEID_USERNAME" --password "$APPLEID_PASSWORD" --keychain "$KEYCHAIN_PATH"

  #     - name: Notarize | Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: ${{ matrix.name }}
  #         path: artifacts

  #     - name: Notarize | Unpack Binaries
  #       run: tar xf artifacts/${{ matrix.name }}

  #     - name: Notarize | Build, Sign, and Notarize Pkg
  #       run: bash install/macos_packages/build_and_notarize.sh starship docs ${{ matrix.arch }} ${{ matrix.pkgname }}

  #     - name: Notarize | Upload Notarized Flat Installer
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ matrix.pkgname }}
  #         path: ${{ matrix.pkgname }}

  #     - name: Notarize | Package Notarized Binary
  #       run: tar czvf ${{ matrix.name }} starship

  #     - name: Notarize | Upload Notarized Binary
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ matrix.name }}
  #         path: ${{ matrix.name }}

  #     - name: Cleanup Secrets
  #       if: ${{ always() }}
  #       run: |
  #         KEYCHAIN_PATH="$RUNNER_TEMP/$KEYCHAIN_FILENAME"
  #         security delete-keychain $KEYCHAIN_PATH

  # Create GitHub release with Rust build targets and release notes
  upload_artifacts:
    name: Add Build Artifacts to Release
    needs: [release_please, github_build] # notarize_and_pkgbuild
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Artifacts
        uses: actions/download-artifact@v3

      - name: Setup | Checksums
        run: for file in ahoy-*/ahoy-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Setup | Publish Release
        run: gh release edit ${{ needs.release_please.outputs.tag_name }} --draft=false --repo=beckler/ahoy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build | Add Artifacts to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ahoy-*/ahoy-*
          tag_name: ${{ needs.release_please.outputs.tag_name }}
